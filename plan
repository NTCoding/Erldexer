
Erldexer Plan
--------------
--------------


Walking Skeleton - end-to-end create jobs with no shop id
----------------------------------------------------------

1. Publish jobs onto batcher queue **[done]

2. Batch just by amount (say 20) **[done]

3. Send to publisher queue **[done]

4. Publish at set intervals **[done]


Priority upsert jobs 
--------------------

1. Jobs producer adds a flag to jobs indicating if they are priority **[done]

2. Batchers will create separate batches for upsert jobs **[done]

3. Priority upsert batches are published to the priority upsert queue **[done]

4. Publishers will take priority jobs if they are present **[done]


Data Sharding
--------------

1. Assign all jobs to a particular shop

2. Batch jobs by shop

3. Each shop has it's own shard in the data store


Error queue
------------

1. Create an error queue with retry logic

1. Simulate a random record in batching to fail every so often and send to error queue

2. Simulate a random record in publishing to fail every so often and send to error queue


Monitoring Service
------------------

1. Hooks into all the event (received, batched, published, error queue)

1. Create a simple web application

2. Show last x number of jobs that were received

3. last x number of jobs that were batched

4. last x number of jobs that were published

5. Current rate of batching

6. Current rate of publishing

7. Current rate of job from receipt to publish (differentiate normal / priority)


Event-store based full re-index service
---------------------------------------

1. Create a subscriber for new jobs

2. Store jobs in an event store

3. Enable full re-indexing from data in event store


Snapshot based re-index
-----------------------

1. Update the full re-index service to create  frequent snap shots

2. Perform a full re-index from snapshots alone


Processing Elasticity
----------------------

1. Enable nodes in Erlang cluster to be re-assigned between the different services


Technical Considerations
------------------------

1. Make it an OTP application

2. Make message processing transactional 

3. Update arch diagram to show SOA services and events/subscribers

4. Start up batchers and publishers on different nodes

5. Spawn publishers and priority publishers in tandem?

6. Make all messages events - e.g. subscriber stores messages locally and pulls of its queue

7. Add some eunit and common tests


Update Diagram
--------------

1. show that a separate node is handling the priority jobs
	+ or it could just be a light-weight process
	+ which is relatively cheap to have sat there doing nothing
